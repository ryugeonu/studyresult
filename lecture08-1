#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include "DS_timer.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NUM_DATA 102400

__global__ void vecAdd(int* _a, int* _b, int* _c) {
	int tID = blockIdx.x*blockDim.x+threadIdx.x;
	
		_c[tID] = _a[tID] + _b[tID];
	
}

int main(void) {

	DS_timer timer(5);
	timer.setTimerName(0, "Cuda Total");
	timer.setTimerName(1, "computation(kernel)");
	timer.setTimerName(2, "data trans. :host -> device");
	timer.setTimerName(3, "data trans. :host -> device");
	timer.setTimerName(4, "vectorsum on host");
	timer.initTimers();


	int* a, * b, * c;
	int* d_a, * d_b, * d_c;

	int memSize = sizeof(int) * NUM_DATA;
	printf("%d elements,memSize=%d bytes\n", NUM_DATA, memSize);
	a = new int[NUM_DATA]; memset(a, 0, memSize);
	b = new int[NUM_DATA]; memset(a, 0, memSize);
	c = new int[NUM_DATA]; memset(a, 0, memSize);

	timer.onTimer(4);
	for (int i = 0; i < NUM_DATA; i++) {
		a[i] = rand() % 10;
		b[i] = rand() % 10;
	}
	timer.offTimer(4);

	cudaMalloc(&d_a, memSize);
	cudaMalloc(&d_b, memSize);
	cudaMalloc(&d_c, memSize);

	timer.onTimer(0);

	timer.onTimer(2);
	cudaMemcpy(d_a, a, memSize, cudaMemcpyHostToDevice);
	cudaMemcpy(d_b, b, memSize, cudaMemcpyHostToDevice);
	timer.offTimer(2);

	dim3 dimGrid(NUM_DATA/512, 1, 1);
	dim3 dimBlock(512, 1, 1);

	timer.onTimer(1);
	vecAdd << <dimGrid,dimBlock >> > (d_a, d_b, d_c);
	cudaDeviceSynchronize();
	timer.offTimer(1);
	
	timer.onTimer(3);
	cudaMemcpy(c, d_c, memSize, cudaMemcpyDeviceToHost);
	timer.offTimer(3);

	timer.offTimer(0); timer.printTimer();
	bool result = true;
	for (int i = 0; i < NUM_DATA; i++) {
		if ((a[i] + b[i]) != c[i]){
			printf("[%d] The result is not matched! (%d,%d)\n", i, a[i] + b[i], c[i]);

			result = false;
		}
	}

	if (result)
		printf("GPU works well!\n");

	cudaFree(d_a); cudaFree(d_b); cudaFree(d_c);
	delete []a; delete []b; delete []c;

	return 0;
}
