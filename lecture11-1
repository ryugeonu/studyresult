#include <cuda_runtime.h> 
#include <device_launch_parameters.h>

#include "DS_timer.h"

#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

__global__ void threadCounting_noSync(int* a) {
	(*a)++;
}

__global__ void threadCounting_atomicGlobal(int* b) {
	 atomicAdd(b, 1);
}

__global__ void threadCounting_atomicShared(int* c) {
	__shared__ int sa;

	if (threadIdx.x == 0)
		sa = 0;
	__syncthreads();

	atomicAdd(&sa, 1);
	__syncthreads();

	if (threadIdx.x == 0)
		atomicAdd(c, sa);
}


int main() {
	DS_timer timer(3);
	int a = 0; int* d;
	int b = 0, c = 0;
	
	cudaMalloc((void**)&d, sizeof(int));
	cudaMemset(d, 0, sizeof(int) * 1);

	timer.onTimer(0);
	threadCounting_noSync << <10240, 512 >> > (d);
	cudaDeviceSynchronize();
	timer.offTimer(0);

	cudaMemcpy(&a, d, sizeof(int), cudaMemcpyDeviceToHost);

	printf("%d\n", a);
	cudaMemset(d, 0, sizeof(int) * 1);

	timer.onTimer(1);
	threadCounting_atomicGlobal << <10240, 512 >> > (d);
	cudaDeviceSynchronize();
	timer.offTimer(1);
	cudaMemcpy(&b, d, sizeof(int), cudaMemcpyDeviceToHost);

	printf("%d\n", b);
	cudaMemset(d, 0, sizeof(int) * 1);


	timer.onTimer(2);
	threadCounting_atomicShared << <10240, 512 >> > (d);
	cudaDeviceSynchronize();
	timer.offTimer(2);

	cudaMemcpy(&c, d, sizeof(int), cudaMemcpyDeviceToHost);

	printf("%d\n", c);
	cudaFree(d);

	timer.printTimer();
}
