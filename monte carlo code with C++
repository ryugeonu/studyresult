#include <iostream>
#include <random> 
#include <DS_timer.h>


using namespace std;
#define N_DATA 10000000

DS_timer* timer;
void setTimer(void);
#define TIMER_HOST		0

#define NUM_TIMER		(1)



int main() {
    timer = NULL; setTimer();

    int in_circle = 0, out_circle = 0;

    float* x = NULL;
    float* y = NULL;

    x = (float*)malloc(sizeof(float) * N_DATA);
    y = (float*)malloc(sizeof(float) * N_DATA);

    if (x == NULL || y == NULL) {
        printf("메모리 할당 실패!\n");
        exit(1);
    }

    random_device engine;
    uniform_int_distribution<int> generator(0, 100000);

    for (int i = 0; i < N_DATA; i++) {

        x[i] = generator(engine) / 100000.0f;
        y[i] = generator(engine) / 100000.0f;

    }

    timer->onTimer(TIMER_HOST);
    for (int i = 0; i < N_DATA; i++) {
        if (x[i] * x[i] + y[i] * y[i] <= 1.0f)
            in_circle++;
        else
            out_circle++;
    }
    timer->offTimer(TIMER_HOST);

    if (in_circle + out_circle != N_DATA)
        cout << "측정값 오류" << endl;

    float approximation = 4.0f * in_circle / N_DATA;


    cout << "추정치= " << approximation << endl;

    timer->printTimer();
    if (timer != NULL)
        delete timer;


    free(x);
    free(y);
}

void setTimer(void)
{
    timer = new DS_timer(NUM_TIMER);

    timer->initTimers();
    timer->setTimerName(TIMER_HOST, "CPU code");
    
}
